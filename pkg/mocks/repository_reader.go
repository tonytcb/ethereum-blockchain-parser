// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/tonytcb/ethereum-blockchain-parser/pkg/domain"
)

// RepositoryReader is an autogenerated mock type for the RepositoryReader type
type RepositoryReader struct {
	mock.Mock
}

type RepositoryReader_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryReader) EXPECT() *RepositoryReader_Expecter {
	return &RepositoryReader_Expecter{mock: &_m.Mock}
}

// GetLatestBlock provides a mock function with given fields: ctx
func (_m *RepositoryReader) GetLatestBlock(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryReader_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type RepositoryReader_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RepositoryReader_Expecter) GetLatestBlock(ctx interface{}) *RepositoryReader_GetLatestBlock_Call {
	return &RepositoryReader_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx)}
}

func (_c *RepositoryReader_GetLatestBlock_Call) Run(run func(ctx context.Context)) *RepositoryReader_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RepositoryReader_GetLatestBlock_Call) Return(_a0 int64, _a1 error) *RepositoryReader_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryReader_GetLatestBlock_Call) RunAndReturn(run func(context.Context) (int64, error)) *RepositoryReader_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, address
func (_m *RepositoryReader) GetTransactions(ctx context.Context, address string) ([]domain.Transaction, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Transaction, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Transaction); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryReader_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type RepositoryReader_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *RepositoryReader_Expecter) GetTransactions(ctx interface{}, address interface{}) *RepositoryReader_GetTransactions_Call {
	return &RepositoryReader_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, address)}
}

func (_c *RepositoryReader_GetTransactions_Call) Run(run func(ctx context.Context, address string)) *RepositoryReader_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepositoryReader_GetTransactions_Call) Return(_a0 []domain.Transaction, _a1 error) *RepositoryReader_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryReader_GetTransactions_Call) RunAndReturn(run func(context.Context, string) ([]domain.Transaction, error)) *RepositoryReader_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryReader creates a new instance of RepositoryReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryReader {
	mock := &RepositoryReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
