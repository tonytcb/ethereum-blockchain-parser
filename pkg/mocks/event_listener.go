// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EventListener is an autogenerated mock type for the EventListener type
type EventListener struct {
	mock.Mock
}

type EventListener_Expecter struct {
	mock *mock.Mock
}

func (_m *EventListener) EXPECT() *EventListener_Expecter {
	return &EventListener_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: ctx, address
func (_m *EventListener) Listen(ctx context.Context, address string) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventListener_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type EventListener_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *EventListener_Expecter) Listen(ctx interface{}, address interface{}) *EventListener_Listen_Call {
	return &EventListener_Listen_Call{Call: _e.mock.On("Listen", ctx, address)}
}

func (_c *EventListener_Listen_Call) Run(run func(ctx context.Context, address string)) *EventListener_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EventListener_Listen_Call) Return(_a0 error) *EventListener_Listen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventListener_Listen_Call) RunAndReturn(run func(context.Context, string) error) *EventListener_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventListener creates a new instance of EventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventListener {
	mock := &EventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
