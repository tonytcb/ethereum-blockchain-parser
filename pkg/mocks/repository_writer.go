// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/tonytcb/ethereum-blockchain-parser/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryWriter is an autogenerated mock type for the RepositoryWriter type
type RepositoryWriter struct {
	mock.Mock
}

type RepositoryWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryWriter) EXPECT() *RepositoryWriter_Expecter {
	return &RepositoryWriter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, address, transactions
func (_m *RepositoryWriter) Add(ctx context.Context, address string, transactions []domain.Transaction) error {
	ret := _m.Called(ctx, address, transactions)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.Transaction) error); ok {
		r0 = rf(ctx, address, transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryWriter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type RepositoryWriter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - transactions []domain.Transaction
func (_e *RepositoryWriter_Expecter) Add(ctx interface{}, address interface{}, transactions interface{}) *RepositoryWriter_Add_Call {
	return &RepositoryWriter_Add_Call{Call: _e.mock.On("Add", ctx, address, transactions)}
}

func (_c *RepositoryWriter_Add_Call) Run(run func(ctx context.Context, address string, transactions []domain.Transaction)) *RepositoryWriter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]domain.Transaction))
	})
	return _c
}

func (_c *RepositoryWriter_Add_Call) Return(_a0 error) *RepositoryWriter_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryWriter_Add_Call) RunAndReturn(run func(context.Context, string, []domain.Transaction) error) *RepositoryWriter_Add_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastBlock provides a mock function with given fields: ctx, address, blockNumber
func (_m *RepositoryWriter) UpdateLastBlock(ctx context.Context, address string, blockNumber int64) error {
	ret := _m.Called(ctx, address, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, address, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryWriter_UpdateLastBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastBlock'
type RepositoryWriter_UpdateLastBlock_Call struct {
	*mock.Call
}

// UpdateLastBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - blockNumber int64
func (_e *RepositoryWriter_Expecter) UpdateLastBlock(ctx interface{}, address interface{}, blockNumber interface{}) *RepositoryWriter_UpdateLastBlock_Call {
	return &RepositoryWriter_UpdateLastBlock_Call{Call: _e.mock.On("UpdateLastBlock", ctx, address, blockNumber)}
}

func (_c *RepositoryWriter_UpdateLastBlock_Call) Run(run func(ctx context.Context, address string, blockNumber int64)) *RepositoryWriter_UpdateLastBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *RepositoryWriter_UpdateLastBlock_Call) Return(_a0 error) *RepositoryWriter_UpdateLastBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryWriter_UpdateLastBlock_Call) RunAndReturn(run func(context.Context, string, int64) error) *RepositoryWriter_UpdateLastBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryWriter creates a new instance of RepositoryWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryWriter {
	mock := &RepositoryWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
