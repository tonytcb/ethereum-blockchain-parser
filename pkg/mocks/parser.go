// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/tonytcb/ethereum-blockchain-parser/pkg/domain"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

type Parser_Expecter struct {
	mock *mock.Mock
}

func (_m *Parser) EXPECT() *Parser_Expecter {
	return &Parser_Expecter{mock: &_m.Mock}
}

// GetCurrentBlock provides a mock function with given fields:
func (_m *Parser) GetCurrentBlock() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBlock")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Parser_GetCurrentBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentBlock'
type Parser_GetCurrentBlock_Call struct {
	*mock.Call
}

// GetCurrentBlock is a helper method to define mock.On call
func (_e *Parser_Expecter) GetCurrentBlock() *Parser_GetCurrentBlock_Call {
	return &Parser_GetCurrentBlock_Call{Call: _e.mock.On("GetCurrentBlock")}
}

func (_c *Parser_GetCurrentBlock_Call) Run(run func()) *Parser_GetCurrentBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Parser_GetCurrentBlock_Call) Return(_a0 int) *Parser_GetCurrentBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Parser_GetCurrentBlock_Call) RunAndReturn(run func() int) *Parser_GetCurrentBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: address
func (_m *Parser) GetTransactions(address string) []domain.Transaction {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []domain.Transaction
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	return r0
}

// Parser_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type Parser_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - address string
func (_e *Parser_Expecter) GetTransactions(address interface{}) *Parser_GetTransactions_Call {
	return &Parser_GetTransactions_Call{Call: _e.mock.On("GetTransactions", address)}
}

func (_c *Parser_GetTransactions_Call) Run(run func(address string)) *Parser_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Parser_GetTransactions_Call) Return(_a0 []domain.Transaction) *Parser_GetTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Parser_GetTransactions_Call) RunAndReturn(run func(string) []domain.Transaction) *Parser_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: address
func (_m *Parser) Subscribe(address string) bool {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Parser_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Parser_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - address string
func (_e *Parser_Expecter) Subscribe(address interface{}) *Parser_Subscribe_Call {
	return &Parser_Subscribe_Call{Call: _e.mock.On("Subscribe", address)}
}

func (_c *Parser_Subscribe_Call) Run(run func(address string)) *Parser_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Parser_Subscribe_Call) Return(_a0 bool) *Parser_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Parser_Subscribe_Call) RunAndReturn(run func(string) bool) *Parser_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
