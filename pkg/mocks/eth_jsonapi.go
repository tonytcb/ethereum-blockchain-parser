// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/tonytcb/ethereum-blockchain-parser/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// EthJSONAPI is an autogenerated mock type for the EthJSONAPI type
type EthJSONAPI struct {
	mock.Mock
}

type EthJSONAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *EthJSONAPI) EXPECT() *EthJSONAPI_Expecter {
	return &EthJSONAPI_Expecter{mock: &_m.Mock}
}

// FetchTransactions provides a mock function with given fields: ctx, filter
func (_m *EthJSONAPI) FetchTransactions(ctx context.Context, filter string) ([]domain.Transaction, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchTransactions")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Transaction, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Transaction); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthJSONAPI_FetchTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTransactions'
type EthJSONAPI_FetchTransactions_Call struct {
	*mock.Call
}

// FetchTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - filter string
func (_e *EthJSONAPI_Expecter) FetchTransactions(ctx interface{}, filter interface{}) *EthJSONAPI_FetchTransactions_Call {
	return &EthJSONAPI_FetchTransactions_Call{Call: _e.mock.On("FetchTransactions", ctx, filter)}
}

func (_c *EthJSONAPI_FetchTransactions_Call) Run(run func(ctx context.Context, filter string)) *EthJSONAPI_FetchTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EthJSONAPI_FetchTransactions_Call) Return(_a0 []domain.Transaction, _a1 error) *EthJSONAPI_FetchTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthJSONAPI_FetchTransactions_Call) RunAndReturn(run func(context.Context, string) ([]domain.Transaction, error)) *EthJSONAPI_FetchTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewFilter provides a mock function with given fields: ctx, address
func (_m *EthJSONAPI) NewFilter(ctx context.Context, address string) (string, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for NewFilter")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthJSONAPI_NewFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFilter'
type EthJSONAPI_NewFilter_Call struct {
	*mock.Call
}

// NewFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *EthJSONAPI_Expecter) NewFilter(ctx interface{}, address interface{}) *EthJSONAPI_NewFilter_Call {
	return &EthJSONAPI_NewFilter_Call{Call: _e.mock.On("NewFilter", ctx, address)}
}

func (_c *EthJSONAPI_NewFilter_Call) Run(run func(ctx context.Context, address string)) *EthJSONAPI_NewFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EthJSONAPI_NewFilter_Call) Return(_a0 string, _a1 error) *EthJSONAPI_NewFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthJSONAPI_NewFilter_Call) RunAndReturn(run func(context.Context, string) (string, error)) *EthJSONAPI_NewFilter_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFilter provides a mock function with given fields: ctx, address
func (_m *EthJSONAPI) RemoveFilter(ctx context.Context, address string) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EthJSONAPI_RemoveFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFilter'
type EthJSONAPI_RemoveFilter_Call struct {
	*mock.Call
}

// RemoveFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *EthJSONAPI_Expecter) RemoveFilter(ctx interface{}, address interface{}) *EthJSONAPI_RemoveFilter_Call {
	return &EthJSONAPI_RemoveFilter_Call{Call: _e.mock.On("RemoveFilter", ctx, address)}
}

func (_c *EthJSONAPI_RemoveFilter_Call) Run(run func(ctx context.Context, address string)) *EthJSONAPI_RemoveFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EthJSONAPI_RemoveFilter_Call) Return(_a0 error) *EthJSONAPI_RemoveFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EthJSONAPI_RemoveFilter_Call) RunAndReturn(run func(context.Context, string) error) *EthJSONAPI_RemoveFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewEthJSONAPI creates a new instance of EthJSONAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthJSONAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthJSONAPI {
	mock := &EthJSONAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
